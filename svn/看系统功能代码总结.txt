稳一点~ 静一点~  
该文档的功能实现都是在mxpms的前提下

1、全局窗口方法
	param参数：
		openView:窗口中包含的展示页面
		dialogText:窗口的标题
		winWidth:窗口宽度
		winHeight:窗口高度
	function功能函数：
		function _winQJShowDialog(openView,dialogText,winHeight,winWidth){
			//定义一个全局的windowManager,用来负责窗口的弹出
			var mgr = new mxpms.windows.WindowManager();
			
			//弹出窗口
			var _win = null;
			if(mgr != null){
				_win = mgr.create({
					height : winHeight,
					width : winWidth,
					title : dialogText,
					reusable : true,	//获取或设置当前窗体是否可被重复利用
					resizable:false 	//获取是否可以由用户自定义窗体大小，
											若为false,displayMaxButton会被设置为false，
											displayMaxButton 为获取或设置是否显示“最大化”按钮
				});
			}
			_win.setView(openView);
			return _win;
			
		}
	
	调用的时候：
	//获取到需要放置的视图
		var selzfxlView = new selzfxl.views.MainViewController().getView(); 
	//调用全局窗口
		var win = _winQJShowDialog(selzfxlView,"电站/线路选择树",280,400);
	//显示窗口
		win.showDialog();
	有一个获取对话框返回值的回掉函数：
		win.showDialog(function(p_dialog){
			//p_dialog代表当前的窗体对象，
			//通过p_dialog.dialogResult来获取对话框的返回值。
			var resultValue = p_dialog.dialogResult;
			
		})
		
2、searchBox：
	加载查询区：
	searchBox.setFields();
	关闭重置按钮
	searchBox.resetButton.off("click");
	自定义重置按钮
	searchBox.resetButton.on("click",me.controller.btnResetCheck_click);
	
	同理：
	自定义查询按钮：
	加载查询区：searchBox.setFields();
	关闭查询按钮：
	searchBox.searchButton.off("click");
	searchBox.searchButton.on("click",me.controller.btnSearchCheck_click);

	有条件重置按钮：(比如设置计划状态文本框的值为 计划制定)
	me.btnResetCheck_click = function(){
	var length = me.view.searchBox.editors.length;
		for(var i=0;i<length; i++){
			if(me.view.searchBox.editors[i].name== "jhzt"){
				me.view.searchBox.editors[i].setValue("JHZT_BZ","计划制定");
			}else{
				me.view.searchBox.editors[i].setValue(null,null);
			}
		}
		
	}

3、设置更多功能里面某两个功能为不可用的灰色：
me.view._toolbar.items["#otherMenuGroup"].items["#changeplan"].setEnable(false);
me.view._toolbar.items["#otherMenuGroup"].items["#cancelplan"].setEnable(false);

4、表格是否要各行变色
 me.view._dataGrid.allowInterlacedRow = false;//不各行变色
 
 5、直接在mainview中 实现页面 工具栏提示：
 var wartext = $("<span style = 'float : center;width :auto'><font color = red>标记红色：你猜哦</span>");
 dataGrid.$(".pageNaviBar").append(wartext);
 
 6、GridEntityContainer（本地、非本地）
 
 非本地的表格数据容器：
 var restUrl = "~/rest/uapdepartment/querryDept";
 var gridEntityContainer = new mx.datacontainers.GridEntityContainer({
        	loadMeta : false,//mate报错不出现
            baseUrl : deptCJ.mappath(restUrl),
            iscID : "-1", // iscID 是数据元素的统一权限功能编码。默认值为  "-1" ，表示不应用权限设置。
            primaryKey: "depId"
        });
 在初始化datagrid里面写上： entityContainer: gridEntityContainer //加载数据的
 非本地的表格数据容器，是通过走后台查询数据封装起来的。
 
 本地的表格数据容器：
 me.gridLocalEntityContainer = new  mx.datacontainers.GridEntityContainer({
	type : "local",//声明容器类型为本地数据
	primaryKey : "objid",
	data : [],
	onload : me.controller._gridLocalEntityContainer_load;	
 });
 
 本地表格数据容器 要声明容器类型为本地。
 只有需要数据字典的字段才会有数据字典。
 
 me._gridLocalEntityContainer_load = function(e){
	e.itemCount = me.itemCount;
	e.items = me.data;
	e.target.dicts = me.dictItems;
 }
 
 //查询函数
 me.searchButton = function (){	
	//经过后台查询得到返回中数据
	var restClient = new mx.rpc.RESTClient();
		// 获取数据列表
	var result = restClient.getSync(
					jxjhsh.mappath("~/rest/tyjdwyjjxjh/getUserTaskList"), 
					param);
	if(result.successful){
		//获得数据
		var items = result.resultValue.items;
		//获得数据字典(若有多个字段设置为数据字典，则获取到的为一个数据字典数组)
		var dicts = result.resultValue.dicts; //下拉框的字段名和数据
		//处理数据字段的格式
		for(var j=0;j<dicts.length; j++ ){
			var item = [];
			//每一个字段的数据字典都包含多个该字段的数据（text\value,二次循环拿到这些值）
			for(var k = 0;k<dicts[j].values.length; k++){
				item.add({
					text : dicts[j].value[k].text,
					value : dicts[j].value[k].value
				});
			}
			me.dictItems(dicts[j].name) = item;
		}
		//获得数据以及数据条目
		me.data = result.resultValue.items;
		me.itemCount = result.resultValue.itemCount;
	}
				
 }
 
 
 
 